#############
# Load Data #
#############

import tensorflow.keras
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import cifar10
import pickle
import os
import numpy as np
from sklearn.model_selection import train_test_split

# Load data from TCGA Hilberts
PDIR='/cluster/projects/pughlab/projects/cancer_cell_lines/TCGA'
DATADIR = os.path.join(PDIR, "data")
OUTDIR = os.path.join(PDIR, "models")
IMG_SIZE=300

pickle_X = open(os.path.join(DATADIR, "X.pickle"), "rb")
pickle_y = open(os.path.join(DATADIR, "y.pickle"), "rb")
X = pickle.load(pickle_X)
y = pickle.load(pickle_y)
#X = np.array(X).reshape(-1, IMG_SIZE, IMG_SIZE, 3)

img = plt.imshow(X[0])
plt.savefig(os.path.join(OUTDIR, "test.png"))


x_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.2)

# Load CIFAR-10 and format data
#(x_train2, y_train2), (x_test2, y_test2) = cifar10.load_data()

# One-hot encoding of y
y_train_one_hot = tensorflow.keras.utils.to_categorical(y_train, y.max()+1)
y_test_one_hot = tensorflow.keras.utils.to_categorical(y_test, y.max()+1)

# Format
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train = x_train / 255
x_test = x_test / 255

#################
# Build ConvNet #
#################

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D

# Build architecture
model = Sequential()
model.add(Conv2D(filters=32,  kernel_size=(3,3), activation='relu', padding='same', input_shape=(IMG_SIZE,IMG_SIZE,3)))
model.add(Conv2D(filters=32, kernel_size=(3,3), activation='relu', padding='same'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(rate=0.25))

model.add(Conv2D(filters=64,  kernel_size=(3,3), activation='relu', padding='same'))
model.add(Conv2D(filters=64, kernel_size=(3,3), activation='relu', padding='same'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(rate=0.25))
model.add(Flatten())

model.add(Dense(units=512, activation='relu'))
model.add(Dropout(rate=0.20))
model.add(Dense(units=y.max()+1, activation='softmax'))

model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])
              
#################
# Train ConvNet #
#################
hist = model.fit(x_train, y_train_one_hot,
                 batch_size=32, epochs=20,
                 validation_split=0.2)

acc = hist.history['accuracy']
val_acc = hist.history['val_accuracy']

loss = hist.history['loss']
val_loss = hist.history['val_loss']
 
plt.figure(figsize=(8, 8))
plt.subplot(2, 1, 1)
plt.plot(acc, label='Training Accuracy')
plt.plot(val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.ylabel('Accuracy')
plt.ylim([min(plt.ylim()),1])
plt.title('Training and Validation Accuracy')

plt.subplot(2, 1, 2)
plt.plot(loss, label='Training Loss')
plt.plot(val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.ylabel('Cross Entropy')
plt.ylim([0,1.0])
plt.title('Training and Validation Loss')
plt.xlabel('epoch')
plt.savefig(os.path.join(OUTDIR, 'tcga_accuracy_layer2.png'))

model.evaluate(x_test, y_test_one_hot)[1]
model.save(os.path.join(OUTDIR, 'my_tcga_model_layer2.h5'))
